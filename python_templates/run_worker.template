import asyncio
{{ if .Cloud }}
from temporalio.client import Client, TLSConfig
from typing import Optional
import os
{{ end }}

{{ if .ChildWorkflow}}
from temporalio.client import Client
from temporalio.worker import Worker
from workflows import {{ .Workflow }}, {{ .ChildWorkflow }}
from activities import say_hello
{{ else }}
from activities import say_hello
from temporalio.client import Client
from temporalio.worker import Worker
from workflows import {{ .Workflow }}
{{ end }}


async def main():
    {{ if .Cloud }}
    server_root_ca_cert: Optional[bytes] = None
    with open(os.getenv("TEMPORAL_MTLS_TLS_CERT"), "rb") as f:
        client_cert = f.read()

    with open(os.getenv("TEMPORAL_MTLS_TLS_KEY"), "rb") as f:
        client_key = f.read()

    # Start client
    client = await Client.connect(
        os.getenv("TEMPORAL_HOST_URL"),
        
        namespace=os.getenv("TEMPORAL_NAMESPACE"),
        tls=TLSConfig(
            server_root_ca_cert=server_root_ca_cert,
            client_cert=client_cert,
            client_private_key=client_key,
        ),
    )
    {{ else }}
    client = await Client.connect("localhost:7233")
    {{ end }}

    {{ if .ChildWorkflow }}
    worker = Worker(
        client, task_queue="my-task-queue", workflows=[{{ .Workflow }}, {{ .ChildWorkflow }}], activities=[say_hello]
    )
    {{ else }}
    worker = Worker(
        client, task_queue="my-task-queue", workflows=[{{ .Workflow }}], activities=[say_hello]
    )
    {{ end }}
    await worker.run()


if __name__ == "__main__":
    asyncio.run(main())
